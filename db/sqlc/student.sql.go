// Code generated by sqlc. DO NOT EDIT.
// source: student.sql

package db

import (
	"context"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO student (
    student_id,
    first_name,
    last_name,
    email,
    department
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING student_id, first_name, last_name, email, department, created_at
`

type CreateStudentParams struct {
	StudentID  string `json:"student_id"`
	FirstName  string `json:"first_name"`
	LastName   string `json:"last_name"`
	Email      string `json:"email"`
	Department string `json:"department"`
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent,
		arg.StudentID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Department,
	)
	var i Student
	err := row.Scan(
		&i.StudentID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Department,
		&i.CreatedAt,
	)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM student
WHERE student_id = $1
`

func (q *Queries) DeleteStudent(ctx context.Context, studentID string) error {
	_, err := q.db.ExecContext(ctx, deleteStudent, studentID)
	return err
}

const getStudent = `-- name: GetStudent :one
SELECT student_id, first_name, last_name, email, department, created_at FROM student
WHERE student_id = $1
`

func (q *Queries) GetStudent(ctx context.Context, studentID string) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudent, studentID)
	var i Student
	err := row.Scan(
		&i.StudentID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Department,
		&i.CreatedAt,
	)
	return i, err
}

const listStudents = `-- name: ListStudents :many
SELECT student_id, first_name, last_name, email, department, created_at FROM student 
ORDER BY student_id
LIMIT $1
OFFSET $2
`

type ListStudentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListStudents(ctx context.Context, arg ListStudentsParams) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, listStudents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Student{}
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.StudentID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Department,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudent = `-- name: UpdateStudent :one
UPDATE student
SET first_name = $2, last_name = $3, email = $4, department = $5
WHERE student_id = $1
RETURNING student_id, first_name, last_name, email, department, created_at
`

type UpdateStudentParams struct {
	StudentID  string `json:"student_id"`
	FirstName  string `json:"first_name"`
	LastName   string `json:"last_name"`
	Email      string `json:"email"`
	Department string `json:"department"`
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, updateStudent,
		arg.StudentID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Department,
	)
	var i Student
	err := row.Scan(
		&i.StudentID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Department,
		&i.CreatedAt,
	)
	return i, err
}
