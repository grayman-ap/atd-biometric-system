// Code generated by sqlc. DO NOT EDIT.
// source: tutor.sql

package db

import (
	"context"
)

const createTutor = `-- name: CreateTutor :one
INSERT INTO tutor (
    staff_id,
    first_name,
    last_name,
    email
) VALUES (
    $1, $2, $3, $4
) RETURNING staff_id, first_name, last_name, email, created_at
`

type CreateTutorParams struct {
	StaffID   string `json:"staff_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) CreateTutor(ctx context.Context, arg CreateTutorParams) (Tutor, error) {
	row := q.db.QueryRowContext(ctx, createTutor,
		arg.StaffID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i Tutor
	err := row.Scan(
		&i.StaffID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTutor = `-- name: DeleteTutor :exec
DELETE FROM tutor
WHERE staff_id = $1
`

func (q *Queries) DeleteTutor(ctx context.Context, staffID string) error {
	_, err := q.db.ExecContext(ctx, deleteTutor, staffID)
	return err
}

const getTutor = `-- name: GetTutor :one
SELECT staff_id, first_name, last_name, email, created_at FROM tutor
WHERE staff_id = $1
`

func (q *Queries) GetTutor(ctx context.Context, staffID string) (Tutor, error) {
	row := q.db.QueryRowContext(ctx, getTutor, staffID)
	var i Tutor
	err := row.Scan(
		&i.StaffID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const listTutors = `-- name: ListTutors :many
SELECT staff_id, first_name, last_name, email, created_at FROM tutor 
ORDER BY staff_id
LIMIT $1
OFFSET $2
`

type ListTutorsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTutors(ctx context.Context, arg ListTutorsParams) ([]Tutor, error) {
	rows, err := q.db.QueryContext(ctx, listTutors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tutor{}
	for rows.Next() {
		var i Tutor
		if err := rows.Scan(
			&i.StaffID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTutor = `-- name: UpdateTutor :one
UPDATE tutor
SET first_name = $2, last_name = $3, email = $4
WHERE staff_id = $1
RETURNING staff_id, first_name, last_name, email, created_at
`

type UpdateTutorParams struct {
	StaffID   string `json:"staff_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) UpdateTutor(ctx context.Context, arg UpdateTutorParams) (Tutor, error) {
	row := q.db.QueryRowContext(ctx, updateTutor,
		arg.StaffID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i Tutor
	err := row.Scan(
		&i.StaffID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
