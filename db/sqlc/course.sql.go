// Code generated by sqlc. DO NOT EDIT.
// source: course.sql

package db

import (
	"context"
	"time"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO course (
    course_code,
    department,
    number_of_student,
    course_title,
    course_unit,
    venue,
    start_time,
    end_time
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING course_code, department, number_of_student, course_title, course_unit, venue, start_time, end_time, total_duration, created_at
`

type CreateCourseParams struct {
	CourseCode      string    `json:"course_code"`
	Department      string    `json:"department"`
	NumberOfStudent int64     `json:"number_of_student"`
	CourseTitle     string    `json:"course_title"`
	CourseUnit      string    `json:"course_unit"`
	Venue           string    `json:"venue"`
	StartTime       time.Time `json:"start_time"`
	EndTime         time.Time `json:"end_time"`
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.db.QueryRowContext(ctx, createCourse,
		arg.CourseCode,
		arg.Department,
		arg.NumberOfStudent,
		arg.CourseTitle,
		arg.CourseUnit,
		arg.Venue,
		arg.StartTime,
		arg.EndTime,
	)
	var i Course
	err := row.Scan(
		&i.CourseCode,
		&i.Department,
		&i.NumberOfStudent,
		&i.CourseTitle,
		&i.CourseUnit,
		&i.Venue,
		&i.StartTime,
		&i.EndTime,
		&i.TotalDuration,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCourse = `-- name: DeleteCourse :exec
DELETE FROM course
WHERE course_code = $1
`

func (q *Queries) DeleteCourse(ctx context.Context, courseCode string) error {
	_, err := q.db.ExecContext(ctx, deleteCourse, courseCode)
	return err
}

const getCourse = `-- name: GetCourse :one
SELECT course_code, department, number_of_student, course_title, course_unit, venue, start_time, end_time, total_duration, created_at FROM course
WHERE course_code = 1
`

func (q *Queries) GetCourse(ctx context.Context) (Course, error) {
	row := q.db.QueryRowContext(ctx, getCourse)
	var i Course
	err := row.Scan(
		&i.CourseCode,
		&i.Department,
		&i.NumberOfStudent,
		&i.CourseTitle,
		&i.CourseUnit,
		&i.Venue,
		&i.StartTime,
		&i.EndTime,
		&i.TotalDuration,
		&i.CreatedAt,
	)
	return i, err
}

const listCourse = `-- name: ListCourse :many
SELECT course_code, department, number_of_student, course_title, course_unit, venue, start_time, end_time, total_duration, created_at FROM course 
ORDER BY course_code
LIMIT $1
OFFSET $2
`

type ListCourseParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCourse(ctx context.Context, arg ListCourseParams) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, listCourse, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Course{}
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.CourseCode,
			&i.Department,
			&i.NumberOfStudent,
			&i.CourseTitle,
			&i.CourseUnit,
			&i.Venue,
			&i.StartTime,
			&i.EndTime,
			&i.TotalDuration,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourse = `-- name: UpdateCourse :one
UPDATE course
SET department = $2, number_of_student = $3, course_title = $4, course_unit= $5, venue = $6, start_time = $7, end_time = $8
WHERE course_code = $1
RETURNING course_code, department, number_of_student, course_title, course_unit, venue, start_time, end_time, total_duration, created_at
`

type UpdateCourseParams struct {
	CourseCode      string    `json:"course_code"`
	Department      string    `json:"department"`
	NumberOfStudent int64     `json:"number_of_student"`
	CourseTitle     string    `json:"course_title"`
	CourseUnit      string    `json:"course_unit"`
	Venue           string    `json:"venue"`
	StartTime       time.Time `json:"start_time"`
	EndTime         time.Time `json:"end_time"`
}

func (q *Queries) UpdateCourse(ctx context.Context, arg UpdateCourseParams) (Course, error) {
	row := q.db.QueryRowContext(ctx, updateCourse,
		arg.CourseCode,
		arg.Department,
		arg.NumberOfStudent,
		arg.CourseTitle,
		arg.CourseUnit,
		arg.Venue,
		arg.StartTime,
		arg.EndTime,
	)
	var i Course
	err := row.Scan(
		&i.CourseCode,
		&i.Department,
		&i.NumberOfStudent,
		&i.CourseTitle,
		&i.CourseUnit,
		&i.Venue,
		&i.StartTime,
		&i.EndTime,
		&i.TotalDuration,
		&i.CreatedAt,
	)
	return i, err
}
