// Code generated by sqlc. DO NOT EDIT.
// source: attendance.sql

package db

import (
	"context"
	"time"
)

const createAttendance = `-- name: CreateAttendance :one
INSERT INTO attendance(
    student,
    course_code,
    mark_student,
    last_attendance
) VALUES (
    $1, $2, $3, $4
) RETURNING id, student, course_code, mark_student, last_attendance, created_at
`

type CreateAttendanceParams struct {
	Student        string    `json:"student"`
	CourseCode     string    `json:"course_code"`
	MarkStudent    bool      `json:"mark_student"`
	LastAttendance time.Time `json:"last_attendance"`
}

func (q *Queries) CreateAttendance(ctx context.Context, arg CreateAttendanceParams) (Attendance, error) {
	row := q.db.QueryRowContext(ctx, createAttendance,
		arg.Student,
		arg.CourseCode,
		arg.MarkStudent,
		arg.LastAttendance,
	)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.Student,
		&i.CourseCode,
		&i.MarkStudent,
		&i.LastAttendance,
		&i.CreatedAt,
	)
	return i, err
}

const getAttendance = `-- name: GetAttendance :one
SELECT id, student, course_code, mark_student, last_attendance, created_at FROM attendance
WHERE id = 1 LIMIT $1
`

func (q *Queries) GetAttendance(ctx context.Context, limit int32) (Attendance, error) {
	row := q.db.QueryRowContext(ctx, getAttendance, limit)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.Student,
		&i.CourseCode,
		&i.MarkStudent,
		&i.LastAttendance,
		&i.CreatedAt,
	)
	return i, err
}

const updateAttendance = `-- name: UpdateAttendance :one
UPDATE attendance
SET student = $2, course_code = $3, mark_student = $4, last_attendance = $5
WHERE id = $1
RETURNING id, student, course_code, mark_student, last_attendance, created_at
`

type UpdateAttendanceParams struct {
	ID             int64     `json:"id"`
	Student        string    `json:"student"`
	CourseCode     string    `json:"course_code"`
	MarkStudent    bool      `json:"mark_student"`
	LastAttendance time.Time `json:"last_attendance"`
}

func (q *Queries) UpdateAttendance(ctx context.Context, arg UpdateAttendanceParams) (Attendance, error) {
	row := q.db.QueryRowContext(ctx, updateAttendance,
		arg.ID,
		arg.Student,
		arg.CourseCode,
		arg.MarkStudent,
		arg.LastAttendance,
	)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.Student,
		&i.CourseCode,
		&i.MarkStudent,
		&i.LastAttendance,
		&i.CreatedAt,
	)
	return i, err
}
